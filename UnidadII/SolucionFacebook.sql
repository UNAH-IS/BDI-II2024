--1. Consultar la cantidad de likes por publicación.
SELECT  A.CODIGO_PUBLICACION,
        B.CONTENIDO_PUBLICACION,
        COUNT(*) AS CANTIDAD_LIKES
FROM TBL_LIKE_PUBLICACIONES A
INNER  JOIN TBL_PUBLICACIONES B
ON (A.CODIGO_PUBLICACION = B.CODIGO_PUBLICACION)
GROUP BY A.CODIGO_PUBLICACION, B.CONTENIDO_PUBLICACION
ORDER BY A.CODIGO_PUBLICACION;


--2. Consultar la cantidad de likes por fotografía.
SELECT  A.CODIGO_FOTO,
        B.DESCRIPCION_FOTO,
        COUNT(*) AS CANTIDAD_LIKES
FROM TBL_LIKE_FOTOGRAFIAS A
INNER JOIN TBL_FOTOS B
ON (A.CODIGO_FOTO = B.CODIGO_FOTO)
GROUP BY A.CODIGO_FOTO, B.DESCRIPCION_FOTO
ORDER BY A.CODIGO_FOTO;

--3. Consultar los grupos en los cuales la cantidad de 
-- usuarios sea mayor que 5, mostrar el nombre
--del grupo y la cantidad de usuarios.
SELECT * FROM TBL_GRUPOS;

SELECT  A.CODIGO_GRUPO,
        B.NOMBRE_GRUPO,
        COUNT(*) AS CANTIDAD_USUARIOS
FROM TBL_GRUPOS_X_USUARIO A
INNER JOIN TBL_GRUPOS B
ON (A.CODIGO_GRUPO = B.CODIGO_GRUPO)
GROUP BY A.CODIGO_GRUPO,B.NOMBRE_GRUPO 
HAVING COUNT(*) >5
ORDER BY 1;

SELECT * 
FROM (
    SELECT  A.CODIGO_GRUPO,
            B.NOMBRE_GRUPO,
            COUNT(*) AS CANTIDAD_USUARIOS
    FROM TBL_GRUPOS_X_USUARIO A
    INNER JOIN TBL_GRUPOS B
    ON (A.CODIGO_GRUPO = B.CODIGO_GRUPO)
    GROUP BY A.CODIGO_GRUPO,B.NOMBRE_GRUPO 
    ORDER BY 1
)
WHERE CANTIDAD_USUARIOS > 5;


--4. Mostrar la cantidad de amistades pendientes y rechazadas.
SELECT * FROM TBL_USUARIOS;
SELECT * FROM TBL_AMIGOS;
SELECT * FROM TBL_ESTATUS_SOLICITUDES; --2,3

SELECT  A.CODIGO_ESTATUS, B.NOMBRE_ESTATUS, 
        COUNT(*) AS CANTIDAD_SOLICITUDES
FROM TBL_AMIGOS A
INNER JOIN TBL_ESTATUS_SOLICITUDES B
ON (A.CODIGO_ESTATUS = B.CODIGO_ESTATUS)
WHERE A.CODIGO_ESTATUS IN (2,3)
GROUP BY A.CODIGO_ESTATUS, B.NOMBRE_ESTATUS
ORDER BY A.CODIGO_ESTATUS;

--5. Mostrar el usuario con mayor cantidad de amigos confirmados (El más cool).
SELECT MAX(CANTIDAD_AMIGOS_CONFIRMADOS) 
FROM (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS 
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
    ORDER BY CODIGO_USUARIO
);


SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS 
FROM TBL_AMIGOS
WHERE CODIGO_ESTATUS = 1
GROUP BY CODIGO_USUARIO
HAVING COUNT(*) = (
    SELECT MAX(CANTIDAD_AMIGOS_CONFIRMADOS) 
    FROM (
        SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS 
        FROM TBL_AMIGOS
        WHERE CODIGO_ESTATUS = 1
        GROUP BY CODIGO_USUARIO
        ORDER BY CODIGO_USUARIO
    )
)
ORDER BY CODIGO_USUARIO


SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS 
FROM TBL_AMIGOS
WHERE CODIGO_ESTATUS = 1
GROUP BY CODIGO_USUARIO
HAVING COUNT(*) = (
    SELECT MAX(CANTIDAD_AMIGOS_CONFIRMADOS) 
    FROM (
        SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS 
        FROM TBL_AMIGOS
        WHERE CODIGO_ESTATUS = 1
        GROUP BY CODIGO_USUARIO
        ORDER BY CODIGO_USUARIO
    )
)
ORDER BY CODIGO_USUARIO;


WITH AMIGOS_CONFIRMADOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS 
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
    ORDER BY CODIGO_USUARIO
),
RESULTADO AS (
    SELECT A.CODIGO_USUARIO, B.NOMBRE_USUARIO, A.CANTIDAD_AMIGOS_CONFIRMADOS 
    FROM AMIGOS_CONFIRMADOS A
    INNER JOIN TBL_USUARIOS B
    ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
    WHERE CANTIDAD_AMIGOS_CONFIRMADOS = 
        (
            SELECT MAX(CANTIDAD_AMIGOS_CONFIRMADOS)
            FROM AMIGOS_CONFIRMADOS
        )
)
SELECT * FROM RESULTADO;

SELECT * FROM TBL_USUARIOS;




SELECT A.CODIGO_USUARIO, B.NOMBRE_USUARIO, COUNT(*) CANTIDAD_USUARIOS 
FROM TBL_AMIGOS A
INNER JOIN TBL_USUARIOS B
ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
WHERE CODIGO_ESTATUS = 1
GROUP BY A.CODIGO_USUARIO, B.NOMBRE_USUARIO
HAVING COUNT(*) = (
    SELECT MAX(CANTIDAD_USUARIOS) 
    FROM (
        SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_USUARIOS 
        FROM TBL_AMIGOS
        WHERE CODIGO_ESTATUS = 1
        GROUP BY CODIGO_USUARIO
        ORDER BY CODIGO_USUARIO
    )
)
ORDER BY A.CODIGO_USUARIO;


--6. Mostrar el usuario con más solicitudes rechazadas (Forever alone).
WITH AMIGOS_RECHAZADOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS_RECHAZADOS 
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 2
    GROUP BY CODIGO_USUARIO
    --HAVING COUNT(*) = 3
    ORDER BY CODIGO_USUARIO
)
SELECT B.NOMBRE_USUARIO, A.CANTIDAD_AMIGOS_RECHAZADOS 
FROM AMIGOS_RECHAZADOS A
INNER JOIN TBL_USUARIOS B
ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
WHERE CANTIDAD_AMIGOS_RECHAZADOS = 
        (
            SELECT MAX(CANTIDAd_AMIGOS_RECHAZADOS)
            FROM AMIGOS_RECHAZADOS
        );

SELECT * FROM tbl_estatus_solicitudes;

--7. Mostrar la cantidad de usuarios reNgistrados mensualmente.
SELECT  TO_CHAR(FECHA_REGISTRO, 'YYYY-MON') mes, 
        count(*) cantidad_usuarios
FROM TBL_USUARIOS a
group by TO_CHAR(FECHA_REGISTRO, 'YYYY-MON')
order by 1;

--8. Mostrar la edad promedio(avg) de los usuarios por género.
SELECT GENERO_USUARIO, ROUND(AVG(EDAD),2) EDAD_PROMEDIO
FROM TBL_USUARIOS
GROUP BY GENERO_USUARIO;

--9. Con respecto al historial de accesos se necesita saber 
--el crecimiento de los accesos del día 19  de
--agosto del 2015 con respecto al día anterior, 
--la fórmula para calcular dicho crecimi19ento se
--muestra a continuación:

--((b-a)/a) * 100

--Donde:
--a = Cantidad de accesos del día anterior (18 de Agosto del 2015) => 2
--b = Cantidad de accesos del día actual (19 de Agosto del 2015) => 6
--Mostrar el resultado como un porcentaje (Concatenar %)


SELECT ((b-a)/a) * 100 FROM DUAL;
SELECT ((6-2)/2) * 100 FROM DUAL;

SELECT COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18-08-2015', 'DD-MM-YYYY'); --ANTERIOR
    
SELECT COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19-08-2015', 'DD-MM-YYYY'); --ACTUAL


-- MUY ENGORROSA, PERO FUNCIONA
SELECT ((((SELECT COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19-08-2015', 'DD-MM-YYYY'))-(SELECT COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18-08-2015', 'DD-MM-YYYY')))/(SELECT COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18-08-2015', 'DD-MM-YYYY'))) * 100) || '%' AS CRECIMIENTO  FROM DUAL;


--MAS ORDENADA E IGUAL FUNCIONA
WITH B AS (
    SELECT COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('19-08-2015', 'DD-MM-YYYY')
),
A AS (
    SELECT COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE TRUNC(FECHA_HORA_ACCESO) = TO_DATE('18-08-2015', 'DD-MM-YYYY')
)
--SELECT (((SELECT CANTIDAD_ACCESOS FROM B)-(SELECT CANTIDAD_ACCESOS FROM A))/(SELECT CANTIDAD_ACCESOS FROM A)) * 100
--FROM DUAL;
SELECT ((B.CANTIDAD_ACCESOS-A.CANTIDAD_ACCESOS)/A.CANTIDAD_ACCESOS) * 100 || '%'  CRECIMIENTO
FROM A,B;

SELECT  
FROM DUAL;


--10. Crear una consulta que muestre lo siguiente:
--• Nombre del usuario.
--• País donde pertenece.
--• Cantidad de publicaciones que tiene.
--• Cantidad de amigos confirmados.
--Cantidad de likes que ha dado.
--• Cantidad de fotos en las que ha sido etiquetado.
--• Cantidad de accesos en el historial.

WITH AMIGOS_CONFIRMADOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
),
PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(CODIGO_PUBLICACION) CANTIDAD_PUBLICACIONES  
    FROM TBL_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
LIKE_FOTOS AS (
    SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_LIKES 
    FROM TBL_LIKE_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
LIKE_PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
            COUNT(1) CANTIDAD_LIKES
    FROM TBL_LIKE_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
ETIQUETAS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ETIQUETAS
    FROM TBL_ETIQUETA_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ACCESOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    GROUP BY CODIGO_USUARIO
)
SELECT  A.NOMBRE_USUARIO, B.NOMBRE_PAIS,
        NVL(C.CANTIDAD_PUBLICACIONES,0) CANTIDAD_PUBLICACIONES,
        NVL(D.CANTIDAD_AMIGOS, 0) CANTIDAD_AMIGOS,
        NVL(E.CANTIDAD_LIKES, 0) +
        NVL(F.CANTIDAD_LIKES, 0) CANTIDAD_LIKES_TOTAL,
        NVL(G.CANTIDAD_ETIQUETAS, 0) CANTIDAD_ETIQUETAS,
        NVL(H.CANTIDAD_ACCESOS, 0) CANTIDAD_ACCESOS
FROM TBL_USUARIOS A
LEFT JOIN TBL_PAISES B
ON (A.CODIGO_PAIS = B.CODIGO_PAIS)
LEFT JOIN PUBLICACIONES C
ON A.CODIGO_USUARIO = C.CODIGO_USUARIO
LEFT JOIN AMIGOS_CONFIRMADOS D
ON A.CODIGO_USUARIO = D.CODIGO_USUARIO
LEFT JOIN LIKE_FOTOS E
ON A.CODIGO_USUARIO = E.CODIGO_USUARIO
LEFT JOIN LIKE_PUBLICACIONES F
ON A.CODIGO_USUARIO = F.CODIGO_USUARIO
LEFT JOIN ETIQUETAS G
ON A.CODIGO_USUARIO = G.CODIGO_USUARIO
LEFT JOIN ACCESOS H
ON A.CODIGO_USUARIO = H.CODIGO_USUARIO
ORDER BY 3 DESC;


---LO MISMO PERO CON PRODUCTOS CARTESIANOS
CREATE MATERIALIZED VIEW MVW_USUARIOS AS
WITH AMIGOS_CONFIRMADOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
),
PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(CODIGO_PUBLICACION) CANTIDAD_PUBLICACIONES  
    FROM TBL_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
LIKE_FOTOS AS (
    SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_LIKES 
    FROM TBL_LIKE_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
LIKE_PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
            COUNT(1) CANTIDAD_LIKES
    FROM TBL_LIKE_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
ETIQUETAS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ETIQUETAS
    FROM TBL_ETIQUETA_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ACCESOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    GROUP BY CODIGO_USUARIO
)
SELECT  A.NOMBRE_USUARIO, B.NOMBRE_PAIS,
        NVL(C.CANTIDAD_PUBLICACIONES,0) CANTIDAD_PUBLICACIONES,
        NVL(D.CANTIDAD_AMIGOS, 0) CANTIDAD_AMIGOS,
        NVL(E.CANTIDAD_LIKES, 0) +
        NVL(F.CANTIDAD_LIKES, 0) CANTIDAD_LIKES_TOTAL,
        NVL(G.CANTIDAD_ETIQUETAS, 0) CANTIDAD_ETIQUETAS,
        NVL(H.CANTIDAD_ACCESOS, 0) CANTIDAD_ACCESOS
FROM    TBL_USUARIOS A,
        TBL_PAISES B,
        PUBLICACIONES C,
        AMIGOS_CONFIRMADOS D,
        LIKE_FOTOS E,
        LIKE_PUBLICACIONES F,
        ETIQUETAS G,
        ACCESOS H
WHERE   A.CODIGO_PAIS = B.CODIGO_PAIS (+)
AND     A.CODIGO_USUARIO = C.CODIGO_USUARIO (+)
AND     A.CODIGO_USUARIO = D.CODIGO_USUARIO (+)
AND     A.CODIGO_USUARIO = E.CODIGO_USUARIO (+)
AND     A.CODIGO_USUARIO = F.CODIGO_USUARIO (+)
AND     A.CODIGO_USUARIO = G.CODIGO_USUARIO (+)
AND     A.CODIGO_USUARIO = H.CODIGO_USUARIO (+)
ORDER BY 3 DESC;


SELECT * FROM MVW_USUARIOS;


SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ACCESOS
FROM TBL_HISTORIAL_ACCESOS
GROUP BY CODIGO_USUARIO;

SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_LIKES 
FROM TBL_LIKE_PUBLICACIONES
GROUP BY CODIGO_USUARIO;

SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_LIKES 
FROM TBL_LIKE_FOTOGRAFIAS
GROUP BY CODIGO_USUARIO;

SELECT  CODIGO_USUARIO, 
        COUNT(1) CANTIDAD_PUBLICACIONES  
FROM TBL_PUBLICACIONES
GROUP BY CODIGO_USUARIO;


SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ETIQUETAS
FROM TBL_ETIQUETA_FOTOGRAFIAS
GROUP BY CODIGO_USUARIO;


SELECT CODIGO_USUARIO, COUNT(*)
FROM TBL_AMIGOS
WHERE CODIGO_ESTATUS = 1
GROUP BY CODIGO_USUARIO;


SELECT A.NOMBRE_USUARIO, B.NOMBRE_PAIS
FROM TBL_USUARIOS A
LEFT JOIN TBL_PAISES B
ON A.CODIGO_PAIS = B.CODIGO_PAIS;

SELECT A.NOMBRE_USUARIO, B.NOMBRE_PAIS
FROM    TBL_USUARIOS A,
        TBL_PAISES B
WHERE A.CODIGO_PAIS = B.CODIGO_PAIS (+);


