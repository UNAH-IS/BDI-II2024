--- EMPLEADOS CON SU DEPARTAMENTO
SELECT * 
FROM EMPLOYEES A
INNER JOIN DEPARTMENTS B
ON (A.DEPARTMENT_ID = B.DEPARTMENT_ID);


SELECT * 
FROM EMPLOYEES A,
    DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;

--MOSTRAR EMPLEADOS AUNQUE NO TENGAN DEPARTAMENTO
SELECT * 
FROM EMPLOYEES A
LEFT JOIN DEPARTMENTS B
ON (A.DEPARTMENT_ID = B.DEPARTMENT_ID);

SELECT * 
FROM EMPLOYEES A,
    DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID (+);

---MOSTRAR EMPLEADOS CON SU DEPARTAMENT Y DEPARTAMENTOS QUE NO TIENEN EMPLEADOS
SELECT * 
FROM EMPLOYEES A
RIGHT JOIN DEPARTMENTS B
ON (A.DEPARTMENT_ID = B.DEPARTMENT_ID);


SELECT * 
FROM EMPLOYEES A,
    DEPARTMENTS B
WHERE A.DEPARTMENT_ID (+) = B.DEPARTMENT_ID;


--VISUALIZAR LOS EMPLEADOS CON EL NOMBRE DEL JEFE

SELECT  A.FIRST_NAME || ' ' || A.LAST_NAME AS NAME,
        B.FIRST_NAME || ' ' || B.LAST_NAME AS MANAGER_NAME,
        C.FIRST_NAME || ' ' || C.LAST_NAME AS MANAGER_OF_MANAGER_NAME
FROM EMPLOYEES A
LEFT JOIN EMPLOYEES B
ON (A.MANAGER_ID = B.EMPLOYEE_ID)
LEFT JOIN EMPLOYEES C
ON (B.MANAGER_ID = C.EMPLOYEE_ID);


SELECT  A.FIRST_NAME || ' ' || A.LAST_NAME AS NAME,
        B.FIRST_NAME || ' ' || B.LAST_NAME AS MANAGER_NAME,
        C.FIRST_NAME || ' ' || C.LAST_NAME AS MANAGER_OF_MANAGER_NAME
FROM    EMPLOYEES A,
        EMPLOYEES B,
        EMPLOYEES C
WHERE   A.MANAGER_ID = B.EMPLOYEE_ID (+)
AND     B.MANAGER_ID = C.EMPLOYEE_ID (+);


CREATE MATERIALIZED VIEW MVW_EMPLOYEES AS
SELECT  A.EMPLOYEE_ID,
        A.FIRST_NAME,
        A.LAST_NAME,
        A.EMAIL,
        A.SALARY,
        B.JOB_TITLE,
        C.FIRST_NAME AS MANAGER_FIRST_NAME,
        C.LAST_NAME AS MANAGER_LAST_NAME,
        D.DEPARTMENT_NAME,
        E.STREET_ADDRESS,
        E.CITY,
        F.COUNTRY_NAME,
        G.REGION_NAME
        --H.JOB_ID AS PREVIOUS_JOB_ID
FROM EMPLOYEES A 
INNER JOIN JOBS B
ON A.JOB_ID = B.JOB_ID
LEFT JOIN EMPLOYEES C
ON A.MANAGER_ID = C.EMPLOYEE_ID
LEFT JOIN DEPARTMENTS D
ON A.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT JOIN LOCATIONS E
ON D.LOCATION_ID = E.LOCATION_ID
LEFT JOIN COUNTRIES F
ON E.COUNTRY_ID = F.COUNTRY_ID
LEFT JOIN REGIONS G 
ON F.REGION_ID = G.REGION_ID
--LEFT JOIN JOB_HISTORY H
--ON A.EMPLOYEE_ID = H.EMPLOYEE_ID
ORDER BY EMPLOYEE_ID;


SELECT * FROM JOB_HISTORY;


SELECT * FROM DEPARTMENTS;


SELECT * FROM VW_EMPLOYEES; --NO CONSUME ESPACIO
SELECT * FROM MVW_EMPLOYEES; -- CONSUME ESPACIO

BEGIN
    DBMS_MVIEW.REFRESH ('MVW_EMPLOYEES');
END;

SELECT * FROM LOCATIONS;


SELECT DEPARTMENT_NAME, COUNT(*),AVG(SALARY), SUM(SALARY), MAX(SALARY)
FROM VW_EMPLOYEES A
GROUP BY DEPARTMENT_NAME;


-- CUANTOS EMPLEADOS HAY POR PAIS USANDO LA VISTA CREADA

SELECT COUNTRY_NAME, COUNT(*) AS CANTIDAD_EMPLEADOS
FROM VW_EMPLOYEES
GROUP BY COUNTRY_NAME;


SELECT B.DEPARTMENT_NAME, COUNT(*) CANTIDAD_EMPLEADOS
FROM EMPLOYEES A
LEFT JOIN DEPARTMENTS B
ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
LEFT JOIN LOCATIONS C
ON B.LOCATION_ID = C.LOCATION_ID
LEFT JOIN COUNTRIES D
ON C.COUNTRY_ID = D.COUNTRY_ID
GROUP BY B.DEPARTMENT_NAME
HAVING COUNT(*) < 6
ORDER BY 2 DESC;


SELECT * FROM JOBS 
WHERE JOB_ID IN ('AD_PRES',  'AD_VP'); 


select department_id, sum(salary), count(*) 
from employees
group by department_id;

---vista ==> guardar una consulta en la BD


-- CANTIDAD DE PUESTOS DE TRABAJO QUE HA TENIDO UN EMPLEADO
SELECT * FROM EMPLOYEES;

SELECT  B.EMPLOYEE_ID,
        B.FIRST_NAME || ' ' || B.LAST_NAME NOMBRE,
        COUNT(A.JOB_ID) CANTIDAD_JOBS
FROM JOB_HISTORY A 
RIGHT JOIN EMPLOYEES B
ON A.EMPLOYEE_ID = B.EMPLOYEE_ID
GROUP BY    B.EMPLOYEE_ID,
            B.FIRST_NAME || ' ' || B.LAST_NAME;


SELECT *
FROM JOB_HISTORY A 
RIGHT JOIN EMPLOYEES B
ON A.EMPLOYEE_ID = B.EMPLOYEE_ID;

SELECT * FROM EMPLOYEES;




SELECT lower(FIRST_NAME || ' ' || LAST_NAME) NAME
FROM EMPLOYEES; 

SELECT CONCAT(FIRST_NAME, LAST_NAME) NAME
FROM EMPLOYEES; 

select * from employees
where lower(first_name) like '%' || lower(trim('    EN    ')) || '%'
or lower(last_name) like '%' || lower(trim('    EN    ')) || '%';


SELECT rtrim('   St   even    ')
FROM DUAL;

select * from employees
where first_name like '';


select rpad('10.0',10,'0') from dual;






--- obtener el empleado que gana más (ASUMIENDO QUE PUEDEN HABER VARIOS)
SELECT MAX(SALARY) 
FROM EMPLOYEES;


SELECT * FROM EMPLOYEES
WHERE SALARY = (
    SELECT MIN(SALARY) 
    FROM EMPLOYEES
)
OR SALARY = (
    SELECT MAX(SALARY) 
    FROM EMPLOYEES
);


--DETALLE DE LOS PUESTOS DE TRABAJO DE LOS EMPLEADOS QUE GANAN M'AS DE 4000

SELECT *
FROM JOBS
WHERE JOB_ID IN (
    SELECT DISTINCT JOB_ID 
    FROM EMPLOYEES
    WHERE SALARY > 20000
); 

SELECT *
FROM JOBS
WHERE JOB_ID IN ('AD_PRES', 'AC_MGR', 'MK_MAN');


SELECT ROWNUM, A.* 
FROM (
    SELECT * 
    FROM EMPLOYEES
    ORDER BY SALARY desc
) A
WHERE ROWNUM = 1; 


-- VISUALIZAR EL PORCENTAJE QUE REPRESENTA EL SALARIO DE 
-- CADA EMPLEADO EN BASE AL SALARIO TOTAL


SELECT SUM(SALARY) FROM EMPLOYEES; --691400

SELECT (2100/691400) *100 FROM DUAL;

SELECT  FIRST_NAME,
        (SELECT SUM(SALARY) FROM EMPLOYEES) SALARIO_GLOBAL,
        ROUND((SALARY/(SELECT SUM(SALARY) FROM EMPLOYEES)), 4)*100 
FROM EMPLOYEES;



SELECT INITCAP('buenas tardes alumno') FROM DUAL;

INSERT INTO USUARIOS (NOMBRE) VALUES (initcap('juan'));




SELECT * 
FROM (SELECT * FROM EMPLOYEES) A
INNER JOIN VW_EMPLOYEES B
ON  
INNER JOIN JOBS C;

SELECT * FROM EMPLOYEES A
INNER JOIN TMP B
ON (A.HIRE_DATE = B.FECHA);



--MOSTRAR DEPARTAMENTOS CON LA CANTIDAD DE EMPLEADOS 
--Y CON LA SUMA TOTAL DE SALARIO QUE REPRESENTA
--LA CANTIDAD DE PUESTOS DIFERENTES POR DEPARTAMENTO


SELECT  A.DEPARTMENT_NAME, 
        COUNT(EMPLOYEE_ID) CANTIDAD_EMPLEADOS, 
        COUNT(DISTINCT JOB_ID),
        SUM(SALARY) SALARIO_X_DEPART
FROM DEPARTMENTS A
LEFT JOIN EMPLOYEES B
ON (A.DEPARTMENT_ID = B.DEPARTMENT_ID)
GROUP BY A.DEPARTMENT_NAME
ORDER BY 1;




CREATE OR REPLACE TRIGGER TRG_VERIFICAR_NOMBRE_EMPLEADO 
BEFORE UPDATE OF FIRST_NAME ON EMPLOYEES 
FOR EACH ROW
DECLARE
BEGIN
    :NEW.FIRST_NAME := INITCAP(:NEW.FIRST_NAME);
END;

select * from employees;

UPDATE EMPLOYEES
SET FIRST_NAME = 'bruNO'
where employee_id = 104;


IT_PROG
AC_MGR;;

WITH AMIGOS_CONFIRMADOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
),
PUBLICACIONES AS (
    SELECT  CODIGO_USUARIO, 
        COUNT(CODIGO_PUBLICACION) CANTIDAD_PUBLICACIONES  
    FROM TBL_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
)
SELECT  A.NOMBRE_USUARIO, B.NOMBRE_PAIS,
        NVL(C.CANTIDAD_PUBLICACIONES,0) ,
        NVL(D.CANTIDAD_AMIGOS, 0)
FROM TBL_USUARIOS A
LEFT JOIN TBL_PAISES B
ON (A.CODIGO_PAIS = B.CODIGO_PAIS)
LEFT JOIN PUBLICACIONES C
ON A.CODIGO_USUARIO = C.CODIGO_USUARIO
LEFT JOIN AMIGOS_CONFIRMADOS D
ON A.CODIGO_USUARIO = D.CODIGO_USUARIO
ORDER BY 3 DESC;

UPDATE EMPLOYEES
SET JOB_ID = 'AC_MGR'
WHERE EMPLOYEE_ID = 104;

SELECT * FROM JOBS;


select * from employees where employee_id = 104;
select * from job_history;

ROLLBACK;


--TABLAS MUTANTES
CREATE OR REPLACE TRIGGER TRG_JOB_HISTORY 
BEFORE UPDATE OF JOB_ID ON EMPLOYEES
FOR EACH ROW
WHEN (OLD.JOB_ID != NEW.JOB_ID)
DECLARE
BEGIN
    :NEW.HIRE_DATE := SYSDATE + 1;
    INSERT INTO job_history (
        employee_id,
        start_date,
        end_date,
        job_id,
        department_id
    ) VALUES (
        :NEW.EMPLOYEE_ID,
        :OLD.HIRE_DATE,
        SYSDATE,
        :OLD.JOB_ID,
        :OLD.DEPARTMENT_ID
    );
    
END;


BEFORE --- ANTES
AFTER --- DESPUES



